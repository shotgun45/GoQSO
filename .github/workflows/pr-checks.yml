name: Pull Request Checks

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      go: ${{ steps.changes.outputs.go-modified }}
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          go:
            - '**/*.go'
            - 'go.mod'
            - 'go.sum'
            - '.golangci.yml'

  lint:
    name: Lint Go Code
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.go == 'true'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.25.1'
        cache: true

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: v1.65.1
        args: --timeout=5m --config=.golangci.yml --out-format=colored-line-number

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.go == 'true'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.25.1'
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: Generate coverage report
      run: go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.html

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.go == 'true'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.25.1'
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Build application
      run: go build -v -ldflags="-w -s" -o goqso *.go

    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: goqso-binary
        path: goqso

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.go == 'true'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.25.1'
        cache: true

    - name: Run Gosec Security Scanner
      run: |
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
        gosec ./...

  status-check:
    name: Status Check
    runs-on: ubuntu-latest
    needs: [lint, test, build, security]
    if: always()
    steps:
    - name: Check results
      run: |
        if [[ "${{ needs.lint.result }}" == "failure" || "${{ needs.test.result }}" == "failure" || "${{ needs.build.result }}" == "failure" || "${{ needs.security.result }}" == "failure" ]]; then
          echo "One or more checks failed"
          exit 1
        else
          echo "All checks passed"
        fi